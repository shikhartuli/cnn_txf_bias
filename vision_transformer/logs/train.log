2020-11-28 11:14:55,953 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 11:14:55,966 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 11:15:36,099 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 11:15:39,740 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,100]), ShapedArray(float32[8,768,100]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 11:28:02,819 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 11:28:20,508 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,100]), ShapedArray(bfloat16[8,768,100]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,100]), ShapedArray(float32[8,768,100]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,100]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 11:29:10,766 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 11:47:27,164 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 12:03:55,387 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-11-28 12:03:55,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 12:03:55,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 12:03:55,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 12:03:55,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 12:03:55,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 12:03:55,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 12:03:55,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 12:03:55,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 12:03:55,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 12:03:55,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 12:03:55,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 12:03:55,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 12:03:55,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 12:03:55,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,401 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 12:03:55,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 12:03:55,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 12:03:55,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 12:03:55,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 12:03:55,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 12:03:55,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,404 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 12:03:55,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 12:03:55,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,405 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 12:03:55,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 12:03:55,406 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 12:03:55,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 12:03:55,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 12:03:55,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 12:03:55,407 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 12:03:55,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 12:03:55,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 12:03:55,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 12:03:55,408 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 12:15:38,466 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 12:15:38,483 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 12:15:38,493 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 12:15:38,498 [INFO] absl: Reusing dataset cifar100 (/root/tensorflow_datasets/cifar100/3.0.2)
2020-11-28 12:15:38,499 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 12:15:39,024 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 12:15:39,035 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 12:15:39,042 [INFO] absl: Reusing dataset cifar100 (/root/tensorflow_datasets/cifar100/3.0.2)
2020-11-28 12:15:39,043 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 12:20:28,427 [WARNING] tensorflow: From ../simclr/data_util.py:343: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.cast` instead.
2020-11-28 12:20:28,448 [WARNING] tensorflow: From ../simclr/data_util.py:345: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use `tf.cast` instead.
2020-11-28 13:22:35,773 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar100/3.0.2
2020-11-28 13:22:36,506 [INFO] absl: Load dataset info from /tmp/tmpa7t3rt1ntfds
2020-11-28 13:22:36,517 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 13:22:36,524 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar100/3.0.2
2020-11-28 13:22:36,890 [INFO] absl: Load dataset info from /tmp/tmp1_tw_4dwtfds
2020-11-28 13:22:36,898 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 13:22:36,907 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar100/3.0.2
2020-11-28 13:22:37,177 [INFO] absl: Load dataset info from /tmp/tmp6_tcsv54tfds
2020-11-28 13:22:37,191 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 13:22:37,199 [INFO] absl: Generating dataset cifar100 (/root/tensorflow_datasets/cifar100/3.0.2)
2020-11-28 13:22:37,831 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-100-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-100-binaryzK0jb7CkNxmV4pH2clu5WdAlIotsPlZhrMxx9-DELEk.tar.gz.tmp.b41950ddb9a74aa39d0d572597504ee5...
2020-11-28 13:22:37,853 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-11-28 13:22:38,002 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-100-binary.tar.gz HTTP/1.1" 200 168513733
2020-11-28 13:22:48,218 [INFO] absl: Generating split train
2020-11-28 13:23:53,021 [INFO] absl: Done writing /root/tensorflow_datasets/cifar100/3.0.2.incompleteNCJOX0/cifar100-train.tfrecord. Shard lengths: [50000]
2020-11-28 13:23:53,038 [INFO] absl: Generating split test
2020-11-28 13:24:10,105 [INFO] absl: Done writing /root/tensorflow_datasets/cifar100/3.0.2.incompleteNCJOX0/cifar100-test.tfrecord. Shard lengths: [10000]
2020-11-28 13:24:10,118 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-11-28 13:24:10,127 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 13:24:10,958 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 13:24:11,137 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 13:24:11,149 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 13:24:11,160 [INFO] absl: Reusing dataset cifar100 (/root/tensorflow_datasets/cifar100/3.0.2)
2020-11-28 13:24:11,164 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 13:25:13,621 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 13:25:13,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:25:13,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:25:13,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:25:13,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 13:25:13,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:25:13,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:25:13,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 13:25:13,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:25:13,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:25:13,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:25:13,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:25:13,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:25:13,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 13:25:13,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:25:13,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 13:25:13,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,636 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 13:25:13,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,637 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,638 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,639 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:25:13,640 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 13:25:13,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:25:13,641 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,642 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:25:13,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:25:13,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,643 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 13:25:13,645 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,646 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,647 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:25:13,649 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:25:13,650 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 13:25:13,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 13:25:13,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:25:13,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:25:13,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 13:25:13,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:25:13,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:25:13,656 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 13:26:16,615 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-11-28 13:26:16,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:26:16,615 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:26:16,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:26:16,616 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 13:26:16,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:26:16,617 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:26:16,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 13:26:16,618 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:26:16,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:26:16,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,619 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:26:16,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:26:16,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:26:16,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,620 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,621 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 13:26:16,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:26:16,622 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 13:26:16,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 13:26:16,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,623 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,624 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:26:16,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 13:26:16,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 13:26:16,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,625 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:26:16,626 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:26:16,627 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,628 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 13:26:16,629 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,630 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:26:16,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 13:26:16,631 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 13:26:16,632 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 13:26:16,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:26:16,633 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 13:26:16,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 13:26:16,634 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 13:26:16,635 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 13:26:16,635 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 13:51:00,776 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 13:51:00,930 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 13:51:01,953 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 13:51:02,859 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 13:51:04,200 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 13:51:17,803 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 13:51:18,028 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 13:51:32,102 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 13:56:14,531 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 13:56:14,534 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 14:02:48,892 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 14:02:52,884 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,100]), ShapedArray(float32[8,768,100]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 14:03:36,926 [ERROR] root: Internal Python error in the inspect module.
Below is the traceback from this internal error.

2020-11-28 14:03:36,961 [INFO] root: 
Unfortunately, your original traceback can not be constructed.

2020-11-28 14:11:03,773 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 14:11:03,780 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 14:20:57,546 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 14:20:57,864 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 14:20:58,098 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 14:20:58,418 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 14:21:00,960 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 14:21:00,967 [INFO] vit_jax.logging: Inspect extra keys:
{'Transformer/encoderblock_10/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_9/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_6/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_7/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_3/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_8/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_5/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_8/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_3/LayerNorm_0/scale', 'Transformer/encoderblock_3/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_7/LayerNorm_2/bias', 'Transformer/encoderblock_2/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_2/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_4/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_1/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_7/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_9/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_9/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_7/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_9/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_7/LayerNorm_0/scale', 'Transformer/encoderblock_7/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_10/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_10/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_1/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_5/LayerNorm_2/scale', 'Transformer/encoderblock_10/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_11/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_2/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_4/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_2/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_4/LayerNorm_2/scale', 'Transformer/encoderblock_4/LayerNorm_0/scale', 'Transformer/encoderblock_10/LayerNorm_0/scale', 'Transformer/encoderblock_10/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_1/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_8/LayerNorm_2/scale', 'Transformer/encoderblock_11/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_7/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_11/LayerNorm_0/bias', 'Transformer/encoderblock_9/LayerNorm_2/bias', 'Transformer/encoderblock_5/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_7/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_4/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_9/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_5/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_1/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_11/LayerNorm_2/scale', 'Transformer/encoderblock_11/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_6/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_8/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_2/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_8/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_1/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_7/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_4/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_8/LayerNorm_2/bias', 'Transformer/encoderblock_10/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_6/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_1/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_7/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_2/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_4/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_5/LayerNorm_2/bias', 'Transformer/encoderblock_7/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_4/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_5/LayerNorm_0/scale', 'Transformer/encoderblock_1/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_4/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_8/LayerNorm_0/bias', 'Transformer/encoderblock_8/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_1/LayerNorm_0/bias', 'Transformer/encoderblock_1/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_8/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_10/LayerNorm_0/bias', 'Transformer/encoderblock_9/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_9/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_10/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_11/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_5/LayerNorm_0/bias', 'Transformer/encoderblock_6/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_9/LayerNorm_0/scale', 'Transformer/encoderblock_5/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_6/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_3/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_9/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_2/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_11/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_5/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_2/LayerNorm_0/scale', 'Transformer/encoderblock_6/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_7/LayerNorm_2/scale', 'Transformer/encoderblock_11/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_1/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_9/LayerNorm_0/bias', 'Transformer/encoderblock_10/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_11/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_6/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_8/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_3/LayerNorm_2/bias', 'Transformer/encoderblock_3/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_2/LayerNorm_2/scale', 'Transformer/encoderblock_2/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_10/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_6/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_6/LayerNorm_2/bias', 'Transformer/encoderblock_7/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_2/LayerNorm_2/bias', 'Transformer/encoderblock_5/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_3/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_3/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_4/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_3/LayerNorm_0/bias', 'Transformer/encoderblock_1/LayerNorm_2/bias', 'Transformer/encoderblock_11/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_3/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_5/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_7/LayerNorm_0/bias', 'Transformer/encoderblock_1/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_4/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_11/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_6/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_9/LayerNorm_2/scale', 'Transformer/encoderblock_11/LayerNorm_0/scale', 'Transformer/encoderblock_1/LayerNorm_2/scale', 'Transformer/encoderblock_3/LayerNorm_2/scale', 'Transformer/encoderblock_6/LayerNorm_0/bias', 'Transformer/encoderblock_5/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_9/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_10/LayerNorm_2/scale', 'Transformer/encoderblock_10/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_10/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_4/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_5/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_1/LayerNorm_0/scale', 'Transformer/encoderblock_10/LayerNorm_2/bias', 'Transformer/encoderblock_1/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_4/LayerNorm_0/bias', 'Transformer/encoderblock_4/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_11/LayerNorm_2/bias', 'Transformer/encoderblock_1/MlpBlock_3/Dense_1/bias', 'Transformer/encoderblock_11/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_4/LayerNorm_2/bias', 'Transformer/encoderblock_8/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_7/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_2/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_9/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_5/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_6/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_8/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_8/MlpBlock_3/Dense_0/bias', 'Transformer/encoderblock_9/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_10/MultiHeadDotProductAttention_1/out/bias', 'Transformer/encoderblock_3/MultiHeadDotProductAttention_1/value/bias', 'Transformer/encoderblock_8/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_2/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_5/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_5/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_6/LayerNorm_0/scale', 'Transformer/encoderblock_4/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_11/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_3/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_8/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_9/MultiHeadDotProductAttention_1/query/kernel', 'Transformer/encoderblock_6/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_3/MultiHeadDotProductAttention_1/query/bias', 'Transformer/encoderblock_2/MlpBlock_3/Dense_1/kernel', 'Transformer/encoderblock_8/LayerNorm_0/scale', 'Transformer/encoderblock_6/LayerNorm_2/scale', 'Transformer/encoderblock_3/MultiHeadDotProductAttention_1/out/kernel', 'Transformer/encoderblock_2/LayerNorm_0/bias', 'Transformer/encoderblock_3/MultiHeadDotProductAttention_1/key/bias', 'Transformer/encoderblock_11/MultiHeadDotProductAttention_1/key/kernel', 'Transformer/encoderblock_6/MlpBlock_3/Dense_0/kernel', 'Transformer/encoderblock_7/MultiHeadDotProductAttention_1/value/kernel', 'Transformer/encoderblock_2/MultiHeadDotProductAttention_1/out/kernel'}
2020-11-28 14:21:00,973 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 14:21:00,981 [INFO] vit_jax.logging: load_pretrained: resized variant: (1, 577, 768) to (1, 577, 1)
2020-11-28 14:21:00,986 [INFO] vit_jax.logging: load_pretrained: grid-size from 24 to 24
2020-11-28 14:25:12,094 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 14:25:12,103 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 14:26:41,943 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 14:26:41,944 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 14:27:17,240 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 14:27:21,372 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,100]), ShapedArray(float32[8,768,100]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 14:37:09,740 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-11-28 14:37:10,183 [INFO] absl: Load dataset info from /tmp/tmpfq9ki1hatfds
2020-11-28 14:37:10,201 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-11-28 14:37:10,212 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-11-28 14:37:10,458 [INFO] absl: Load dataset info from /tmp/tmpum1w3pbrtfds
2020-11-28 14:37:10,470 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-11-28 14:37:10,479 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-11-28 14:37:10,639 [INFO] absl: Load dataset info from /tmp/tmpfzxilu0etfds
2020-11-28 14:37:10,651 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-11-28 14:37:10,663 [INFO] absl: Generating dataset imagenet2012 (/root/tensorflow_datasets/imagenet2012/5.1.0)
2020-11-28 15:51:08,962 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 15:51:08,980 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 15:51:08,990 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 15:51:09,002 [INFO] absl: Reusing dataset cifar100 (/root/tensorflow_datasets/cifar100/3.0.2)
2020-11-28 15:51:09,008 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 15:51:09,712 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 15:51:09,724 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 15:51:09,734 [INFO] absl: Reusing dataset cifar100 (/root/tensorflow_datasets/cifar100/3.0.2)
2020-11-28 15:51:09,741 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 15:51:32,889 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 15:51:32,892 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 15:51:37,295 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 15:51:40,547 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,100]), ShapedArray(float32[8,768,100]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 15:54:57,722 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 15:55:22,635 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,100]), ShapedArray(bfloat16[8,768,100]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,100]), ShapedArray(float32[8,768,100]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,100]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 15:56:25,689 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 15:58:44,165 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar100/3.0.2
2020-11-28 16:10:31,157 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 16:10:31,569 [INFO] absl: Load dataset info from /tmp/tmpipsv0dvwtfds
2020-11-28 16:10:31,584 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 16:10:31,594 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 16:10:31,814 [INFO] absl: Load dataset info from /tmp/tmpijtz_6a4tfds
2020-11-28 16:10:31,826 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 16:10:31,835 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 16:10:32,050 [INFO] absl: Load dataset info from /tmp/tmp5vivk8b5tfds
2020-11-28 16:10:32,061 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 16:10:32,065 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 16:10:32,460 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.e78260aea0884c8eaf489915bc967b51...
2020-11-28 16:10:32,487 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-11-28 16:10:32,660 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-11-28 16:10:40,761 [INFO] absl: Generating split train
2020-11-28 16:11:40,459 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete4MD4SI/cifar10-train.tfrecord. Shard lengths: [50000]
2020-11-28 16:11:40,470 [INFO] absl: Generating split test
2020-11-28 16:11:51,890 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete4MD4SI/cifar10-test.tfrecord. Shard lengths: [10000]
2020-11-28 16:11:51,898 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-11-28 16:11:51,910 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 16:11:52,349 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 16:11:52,358 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 16:11:52,365 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 16:11:52,367 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 16:12:27,533 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 16:12:27,535 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 16:12:33,245 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 16:12:36,371 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 17:19:37,812 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:21:57,390 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:22:21,871 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:23:56,424 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:23:56,586 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:23:56,594 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:23:56,602 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 17:23:56,606 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:23:57,567 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 17:23:57,740 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:23:57,748 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:23:57,755 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 17:23:57,759 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:24:18,547 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 17:24:18,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 17:24:18,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 17:24:18,549 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,550 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 17:24:18,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,551 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 17:24:18,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 17:24:18,552 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 17:24:18,553 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 17:24:18,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 17:24:18,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 17:24:18,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,554 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 17:24:18,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 17:24:18,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 17:24:18,555 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,556 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,557 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 17:24:18,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,558 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 17:24:18,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 17:24:18,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 17:24:18,559 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,560 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,561 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 17:24:18,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 17:24:18,562 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 17:24:18,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,563 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 17:24:18,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 17:24:18,564 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,565 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,566 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 17:24:18,567 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,568 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,569 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 17:24:18,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 17:24:18,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 17:24:18,570 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 17:24:18,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 17:24:18,571 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 17:24:18,572 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 17:24:18,573 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 17:24:18,575 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 17:24:18,576 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 17:24:32,111 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 17:24:32,285 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 17:24:33,360 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 17:24:34,370 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 17:24:35,723 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 17:24:49,656 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 17:24:49,887 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 17:25:04,870 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 17:25:18,688 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 17:25:18,701 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 17:25:23,295 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:25:26,353 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 17:25:58,717 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:36:27,721 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:36:27,742 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:36:27,754 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:36:27,765 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 17:36:27,771 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:36:28,232 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:36:28,244 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:36:28,255 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 17:36:28,261 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 17:36:58,559 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 17:36:58,568 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 17:37:13,866 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 17:37:33,254 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 17:38:28,801 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 18:09:45,004 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:09:48,035 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 18:18:05,051 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:49:45,926 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:49:45,970 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:49:46,000 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:49:46,051 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 18:49:46,062 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:49:46,996 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:49:47,008 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:49:47,017 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 18:49:47,021 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:51:14,618 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:51:14,628 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:51:14,642 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:51:14,654 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 18:51:14,657 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:51:14,974 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:51:14,980 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:51:14,995 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 18:51:15,000 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:58:55,163 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:58:55,172 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:58:55,192 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:58:55,204 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 18:58:55,212 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:58:55,713 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:58:55,725 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 18:58:55,735 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 18:58:55,741 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:00:28,347 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:00:28,364 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:00:28,377 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:00:28,392 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:00:28,399 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:00:29,314 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 19:00:29,579 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:00:29,595 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:00:29,622 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:00:29,625 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:02:14,777 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:02:14,796 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:02:14,810 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:02:14,822 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:02:14,824 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:02:15,956 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 19:02:16,149 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:02:16,160 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:02:16,170 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:02:16,173 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:10:44,481 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:10:44,503 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:10:44,522 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:10:44,541 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:10:44,543 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:10:44,923 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:10:44,946 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:10:44,966 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:10:44,973 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:10:49,832 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 19:10:49,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:10:49,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:10:49,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:10:49,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 19:10:49,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:10:49,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:10:49,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 19:10:49,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:10:49,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:10:49,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:10:49,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:10:49,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:10:49,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,847 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 19:10:49,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,848 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:10:49,849 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 19:10:49,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 19:10:49,850 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,851 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,852 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:10:49,853 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 19:10:49,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:10:49,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,854 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,855 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:10:49,856 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:10:49,858 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,859 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 19:10:49,860 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,863 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,865 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:10:49,867 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:10:49,868 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 19:10:49,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 19:10:49,869 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:10:49,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:10:49,870 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 19:10:49,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:10:49,871 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:10:49,871 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 19:10:52,441 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 19:10:52,802 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 19:10:53,935 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:10:54,979 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:10:56,396 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:11:10,426 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:11:11,531 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:11:29,633 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:11:42,591 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 19:11:42,605 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 19:11:59,107 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 19:17:08,701 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 19:17:09,213 [INFO] absl: Load dataset info from /tmp/tmp1qnvunsqtfds
2020-11-28 19:17:09,222 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 19:17:09,226 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 19:17:09,631 [INFO] absl: Load dataset info from /tmp/tmpfhs1k3gjtfds
2020-11-28 19:17:09,639 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 19:17:09,655 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 19:17:09,877 [INFO] absl: Load dataset info from /tmp/tmpyrvr_18ntfds
2020-11-28 19:17:09,884 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 19:17:09,888 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:17:10,485 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.a21f0c56f0ed45d2a67a37fc7c86cc71...
2020-11-28 19:17:10,507 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-11-28 19:17:10,631 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-11-28 19:17:17,778 [INFO] absl: Generating split train
2020-11-28 19:18:16,954 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete2V7Q0B/cifar10-train.tfrecord. Shard lengths: [50000]
2020-11-28 19:18:16,963 [INFO] absl: Generating split test
2020-11-28 19:18:26,382 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete2V7Q0B/cifar10-test.tfrecord. Shard lengths: [10000]
2020-11-28 19:18:26,391 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-11-28 19:18:26,400 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:18:26,997 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 19:18:27,122 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:18:27,130 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:18:27,142 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:18:27,143 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:19:05,451 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 19:19:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:19:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:19:05,453 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:19:05,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,454 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 19:19:05,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:19:05,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:19:05,455 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 19:19:05,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:19:05,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:19:05,456 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:19:05,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:19:05,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:19:05,457 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,458 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 19:19:05,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,459 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:19:05,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 19:19:05,460 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 19:19:05,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,461 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:19:05,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 19:19:05,462 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:19:05,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,463 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:19:05,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:19:05,464 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 19:19:05,465 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:19:05,466 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:19:05,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 19:19:05,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 19:19:05,467 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:19:05,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:19:05,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 19:19:05,468 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:19:05,469 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:19:05,469 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 19:19:17,585 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 19:19:17,751 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 19:19:18,764 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:19:19,691 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:19:20,942 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:19:34,278 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:19:34,460 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:19:48,390 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:19:57,315 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 19:19:57,321 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 19:20:12,357 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 19:20:17,150 [ERROR] tornado.general: Uncaught exception in ZMQStream callback
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/zmq/eventloop/zmqstream.py", line 444, in _run_callback
    callback(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/tornado/stack_context.py", line 300, in null_wrapper
    return fn(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py", line 283, in dispatcher
    return self.dispatch_shell(stream, msg)
  File "/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py", line 233, in dispatch_shell
    handler(stream, idents, msg)
  File "/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py", line 403, in execute_request
    sys.stderr.flush()
  File "/usr/local/lib/python3.6/dist-packages/ipykernel/iostream.py", line 349, in flush
    if not evt.wait(self.flush_timeout):
  File "/usr/lib/python3.6/threading.py", line 551, in wait
    signaled = self._cond.wait(timeout)
  File "/usr/lib/python3.6/threading.py", line 299, in wait
    gotit = waiter.acquire(True, timeout)
KeyboardInterrupt
2020-11-28 19:25:46,327 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:25:46,337 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:25:46,343 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:25:46,349 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:25:46,352 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:25:46,845 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 19:25:46,969 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:25:46,977 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:25:46,983 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:25:46,987 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:25:52,650 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 19:25:52,651 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:25:52,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:25:52,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:25:52,652 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 19:25:52,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:25:52,653 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:25:52,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 19:25:52,654 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:25:52,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:25:52,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:25:52,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:25:52,655 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:25:52,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,656 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 19:25:52,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,657 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:25:52,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 19:25:52,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 19:25:52,658 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,659 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:25:52,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 19:25:52,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:25:52,660 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:25:52,661 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:25:52,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,662 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 19:25:52,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,663 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:25:52,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:25:52,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 19:25:52,664 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 19:25:52,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:25:52,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:25:52,665 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 19:25:52,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:25:52,666 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:25:52,666 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 19:26:05,496 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 19:26:05,629 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 19:26:06,632 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:26:07,580 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:26:08,838 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:26:23,339 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:26:23,520 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:26:37,578 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:26:46,274 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 19:26:46,280 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 19:27:24,141 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 19:27:48,793 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 19:28:40,569 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 19:29:19,418 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:29:22,990 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 19:44:53,653 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:44:53,664 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:44:53,679 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:44:53,686 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:44:53,687 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:44:54,269 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 19:44:54,389 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:44:54,395 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:44:54,400 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 19:44:54,402 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 19:44:58,590 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 19:44:58,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:44:58,592 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:44:58,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:44:58,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,593 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 19:44:58,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:44:58,594 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:44:58,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 19:44:58,595 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:44:58,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:44:58,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:44:58,596 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:44:58,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:44:58,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,597 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 19:44:58,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,598 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:44:58,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 19:44:58,599 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 19:44:58,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,600 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:44:58,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 19:44:58,601 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 19:44:58,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:44:58,602 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:44:58,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 19:44:58,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,603 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:44:58,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 19:44:58,604 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 19:44:58,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 19:44:58,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:44:58,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 19:44:58,605 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 19:44:58,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 19:44:58,606 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 19:44:58,606 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 19:45:10,699 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 19:45:10,847 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 19:45:11,841 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:45:12,751 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:45:13,999 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:45:27,832 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:45:28,017 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 19:45:41,791 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 19:45:52,318 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 19:45:52,320 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 19:46:14,096 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 19:46:38,116 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 19:47:29,648 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 20:08:27,261 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 20:10:27,223 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:10:27,237 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:10:27,243 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:10:27,256 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 20:10:27,257 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:10:27,898 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 20:10:28,034 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:10:28,045 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:10:28,056 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 20:10:28,058 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:10:32,241 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 20:10:32,243 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:10:32,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:10:32,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:10:32,244 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 20:10:32,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:10:32,245 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:10:32,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 20:10:32,246 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:10:32,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:10:32,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:10:32,247 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:10:32,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:10:32,248 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,249 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 20:10:32,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,250 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:10:32,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 20:10:32,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 20:10:32,251 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,252 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:10:32,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 20:10:32,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:10:32,253 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:10:32,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:10:32,254 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 20:10:32,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,255 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:10:32,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:10:32,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 20:10:32,256 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 20:10:32,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:10:32,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:10:32,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 20:10:32,257 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:10:32,258 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:10:32,258 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 20:10:43,374 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 20:10:43,552 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 20:10:44,569 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 20:10:45,512 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 20:10:46,761 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 20:11:00,060 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 20:11:00,255 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 20:11:14,097 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 20:11:24,732 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 20:11:24,734 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 20:11:39,537 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 20:11:54,643 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 20:12:46,209 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 20:16:01,467 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 20:24:57,773 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:24:57,790 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:24:57,797 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:24:57,804 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 20:24:57,806 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:24:58,408 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 20:24:58,539 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:24:58,547 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:24:58,556 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 20:24:58,558 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 20:25:02,828 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 20:25:02,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:25:02,830 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:25:02,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:25:02,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,831 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 20:25:02,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:25:02,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,832 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:25:02,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 20:25:02,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:25:02,833 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:25:02,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:25:02,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:25:02,834 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:25:02,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,835 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 20:25:02,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,836 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:25:02,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 20:25:02,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 20:25:02,837 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,838 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:25:02,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 20:25:02,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 20:25:02,839 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:25:02,840 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:25:02,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,841 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 20:25:02,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,842 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:25:02,843 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 20:25:02,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 20:25:02,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 20:25:02,844 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:25:02,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 20:25:02,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 20:25:02,845 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 20:25:02,846 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 20:25:02,846 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 20:25:14,667 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 20:25:14,836 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 20:25:15,827 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 20:25:16,788 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 20:25:18,053 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 20:25:31,771 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 20:25:31,957 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 20:25:45,456 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 20:25:56,043 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 20:25:56,051 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 20:26:18,115 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 20:26:47,479 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 20:27:38,269 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 21:01:31,617 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:01:31,635 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:01:31,643 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:01:31,652 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 21:01:31,654 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:01:32,291 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 21:01:32,422 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:01:32,431 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:01:32,439 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 21:01:32,440 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:01:37,500 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 21:01:37,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:01:37,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:01:37,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:01:37,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 21:01:37,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:01:37,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:01:37,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 21:01:37,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:01:37,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:01:37,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:01:37,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:01:37,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:01:37,506 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,507 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 21:01:37,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:01:37,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 21:01:37,508 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 21:01:37,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,509 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:01:37,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 21:01:37,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:01:37,510 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:01:37,511 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:01:37,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 21:01:37,512 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:01:37,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:01:37,513 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 21:01:37,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 21:01:37,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:01:37,514 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:01:37,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 21:01:37,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:01:37,515 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:01:37,515 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 21:01:49,961 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 21:01:50,175 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 21:01:51,201 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:01:52,123 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:01:53,409 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:02:07,268 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:02:07,487 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:02:21,922 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:02:32,549 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 21:02:32,553 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 21:02:45,128 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 21:03:19,006 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 21:04:10,657 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 21:26:40,740 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:26:40,751 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:26:40,758 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:26:40,765 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 21:26:40,766 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:26:41,330 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 21:26:41,457 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:26:41,467 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:26:41,472 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 21:26:41,474 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:26:45,331 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 21:26:45,333 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:26:45,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:26:45,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:26:45,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 21:26:45,336 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:26:45,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:26:45,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 21:26:45,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:26:45,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:26:45,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:26:45,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:26:45,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:26:45,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 21:26:45,340 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:26:45,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 21:26:45,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 21:26:45,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:26:45,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 21:26:45,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:26:45,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,343 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:26:45,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:26:45,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 21:26:45,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,345 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:26:45,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:26:45,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 21:26:45,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 21:26:45,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:26:45,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:26:45,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 21:26:45,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:26:45,348 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:26:45,348 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 21:26:57,121 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 21:26:57,263 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 21:26:58,280 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:26:59,200 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:27:00,476 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:27:14,756 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:27:14,952 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:27:29,350 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:27:39,935 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 21:27:39,939 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 21:27:44,459 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:27:48,596 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 21:28:07,044 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:31:45,809 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 21:31:46,404 [INFO] absl: Load dataset info from /tmp/tmp9woj5jwdtfds
2020-11-28 21:31:46,413 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 21:31:46,423 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 21:31:46,665 [INFO] absl: Load dataset info from /tmp/tmp7fuu6m3jtfds
2020-11-28 21:31:46,673 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 21:31:46,677 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-28 21:31:46,913 [INFO] absl: Load dataset info from /tmp/tmpfqrn4j_ztfds
2020-11-28 21:31:46,923 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-28 21:31:46,939 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 21:31:47,614 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.7870ab7ac185451cad9db7d842914270...
2020-11-28 21:31:47,635 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-11-28 21:31:47,769 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-11-28 21:31:55,760 [INFO] absl: Generating split train
2020-11-28 21:32:48,787 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete4PO941/cifar10-train.tfrecord. Shard lengths: [50000]
2020-11-28 21:32:48,795 [INFO] absl: Generating split test
2020-11-28 21:32:59,535 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete4PO941/cifar10-test.tfrecord. Shard lengths: [10000]
2020-11-28 21:32:59,546 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-11-28 21:32:59,563 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:33:00,523 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 21:33:00,666 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:33:00,675 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:33:00,683 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 21:33:00,684 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:33:06,731 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 21:33:06,734 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:33:06,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:33:06,735 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:33:06,736 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 21:33:06,737 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:33:06,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:33:06,738 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 21:33:06,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:33:06,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:33:06,739 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:33:06,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:33:06,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:33:06,740 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,741 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 21:33:06,742 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:33:06,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 21:33:06,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,743 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 21:33:06,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,744 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:33:06,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 21:33:06,745 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 21:33:06,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,746 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:33:06,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:33:06,747 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 21:33:06,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,748 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:33:06,749 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 21:33:06,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 21:33:06,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 21:33:06,750 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:33:06,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 21:33:06,751 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 21:33:06,754 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 21:33:06,755 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 21:33:06,755 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 21:33:16,872 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 21:33:17,050 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 21:33:18,077 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:33:19,007 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:33:20,281 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:33:33,934 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:33:34,158 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 21:33:48,323 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:33:59,799 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 21:33:59,802 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 21:34:19,674 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:34:24,215 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 21:37:52,531 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 21:38:13,832 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,577,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,16,16,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,577,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,16,16,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 21:39:06,637 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 21:48:26,746 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 21:59:00,900 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 21:59:15,322 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 21:59:26,729 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 21:59:26,731 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 22:00:22,114 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,145,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,32,32,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 22:09:23,822 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:09:28,515 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 22:32:51,752 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:36:54,301 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 22:36:54,303 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 22:36:59,355 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:37:03,839 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 22:40:54,360 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:40:54,373 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:40:54,381 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:40:54,388 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 22:40:54,390 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:40:54,941 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-28 22:40:55,063 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:40:55,071 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:40:55,079 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-28 22:40:55,082 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:40:58,966 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-28 22:40:58,968 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 22:40:58,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 22:40:58,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,969 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 22:40:58,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-28 22:40:58,970 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 22:40:58,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-28 22:40:58,971 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-28 22:40:58,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 22:40:58,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-28 22:40:58,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,972 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 22:40:58,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 22:40:58,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-28 22:40:58,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,973 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,974 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-28 22:40:58,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-28 22:40:58,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-28 22:40:58,975 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-28 22:40:58,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,976 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 22:40:58,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-28 22:40:58,977 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-28 22:40:58,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 22:40:58,978 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 22:40:58,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-28 22:40:58,979 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 22:40:58,980 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-28 22:40:58,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-28 22:40:58,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-28 22:40:58,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 22:40:58,981 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-28 22:40:58,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-28 22:40:58,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-28 22:40:58,982 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-28 22:40:58,982 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-28 22:41:11,420 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-28 22:41:11,598 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-28 22:41:25,310 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 22:41:25,711 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 22:41:27,009 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 22:41:41,026 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 22:41:41,211 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-28 22:41:55,785 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-28 22:42:09,280 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-28 22:42:09,283 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-28 22:42:14,059 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-28 22:42:17,747 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-28 22:45:24,514 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-28 22:45:41,056 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,145,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,32,32,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-28 22:46:30,364 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-28 22:54:40,743 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 10:58:27,380 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-29 10:58:27,921 [INFO] absl: Load dataset info from /tmp/tmpnx1uli6jtfds
2020-11-29 10:58:27,929 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-29 10:58:27,937 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-29 10:58:28,141 [INFO] absl: Load dataset info from /tmp/tmpa_dagen9tfds
2020-11-29 10:58:28,153 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-29 10:58:28,159 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-29 10:58:28,414 [INFO] absl: Load dataset info from /tmp/tmpnzse14cgtfds
2020-11-29 10:58:28,418 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-29 10:58:28,422 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-29 10:58:28,927 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.5c36792f534e478da89bd0fcf1bfc917...
2020-11-29 10:58:28,939 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-11-29 10:58:29,071 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-11-29 10:58:36,545 [INFO] absl: Generating split train
2020-11-29 10:59:26,098 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete2424GK/cifar10-train.tfrecord. Shard lengths: [50000]
2020-11-29 10:59:26,106 [INFO] absl: Generating split test
2020-11-29 10:59:36,061 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete2424GK/cifar10-test.tfrecord. Shard lengths: [10000]
2020-11-29 10:59:36,076 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-11-29 10:59:36,090 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 10:59:37,013 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-29 10:59:37,162 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 10:59:37,171 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 10:59:37,180 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-29 10:59:37,181 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 10:59:40,677 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-11-29 10:59:40,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-29 10:59:40,679 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-29 10:59:40,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-29 10:59:40,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,680 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-11-29 10:59:40,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-11-29 10:59:40,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,681 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-11-29 10:59:40,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-11-29 10:59:40,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-29 10:59:40,682 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-11-29 10:59:40,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-29 10:59:40,683 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-29 10:59:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-11-29 10:59:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,684 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,686 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-11-29 10:59:40,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-11-29 10:59:40,687 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-11-29 10:59:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-11-29 10:59:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,688 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,689 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-29 10:59:40,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-11-29 10:59:40,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-11-29 10:59:40,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,690 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-29 10:59:40,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-29 10:59:40,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,691 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,692 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-11-29 10:59:40,693 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,694 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-29 10:59:40,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-11-29 10:59:40,695 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-11-29 10:59:40,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-11-29 10:59:40,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-29 10:59:40,696 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-11-29 10:59:40,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-11-29 10:59:40,697 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-11-29 10:59:40,698 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-11-29 10:59:40,698 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-11-29 10:59:49,813 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-11-29 10:59:49,967 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-11-29 11:00:03,371 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-29 11:00:03,771 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-29 11:00:05,065 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-29 11:00:18,807 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-29 11:00:18,998 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-11-29 11:00:33,157 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-11-29 11:00:44,141 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-11-29 11:00:44,144 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-11-29 11:00:48,834 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 11:00:52,339 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1
2020-11-29 11:03:52,292 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-11-29 11:04:09,162 [DEBUG] absl: Compiling update_fn for 8 devices with args (ShapedArray(int32[8]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072]), ShapedArray(bfloat16[8,768,3072]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,3072,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,12,64,768]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,12,64]), ShapedArray(bfloat16[8,768,12,64]), ShapedArray(bfloat16[8,1,145,768]), ShapedArray(bfloat16[8,1,1,768]), ShapedArray(bfloat16[8,768]), ShapedArray(bfloat16[8,32,32,3,768]), ShapedArray(bfloat16[8,10]), ShapedArray(bfloat16[8,768,10]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8]), ShapedArray(float32[8,64,384,384,3]), ShapedArray(float32[8,64,10]), ShapedArray(uint32[8,2])). (num_replicas=8 num_partitions=1
2020-11-29 11:05:00,601 [DEBUG] absl: Compiling _multi_slice for args (ShapedArray(uint32[8,2]),).
2020-11-29 11:12:49,322 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 11:34:35,329 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 11:59:28,027 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 12:45:11,824 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 13:18:28,561 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 13:41:10,933 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-29 17:30:32,862 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:36:15,045 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-30 17:36:15,573 [INFO] absl: Load dataset info from /tmp/tmpxh0_30d0tfds
2020-11-30 17:36:15,582 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-30 17:36:15,587 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-30 17:36:15,811 [INFO] absl: Load dataset info from /tmp/tmpafu8gdfbtfds
2020-11-30 17:36:15,818 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-30 17:36:15,823 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-11-30 17:36:16,096 [INFO] absl: Load dataset info from /tmp/tmpzgudik2ttfds
2020-11-30 17:36:16,103 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-11-30 17:36:16,105 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:36:16,477 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.4c3b421a93ef48ad964393d665efad9d...
2020-11-30 17:36:16,491 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-11-30 17:36:16,672 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-11-30 17:36:21,411 [INFO] absl: Generating split train
2020-11-30 17:36:54,349 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incompleteQ2O93W/cifar10-train.tfrecord. Shard lengths: [50000]
2020-11-30 17:36:54,354 [INFO] absl: Generating split test
2020-11-30 17:37:01,030 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incompleteQ2O93W/cifar10-test.tfrecord. Shard lengths: [10000]
2020-11-30 17:37:01,035 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-11-30 17:37:01,042 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:37:01,573 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-30 17:37:01,657 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:37:01,666 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:37:01,685 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:37:01,689 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:38:12,848 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:38:12,855 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:38:12,859 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:38:12,864 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:38:12,865 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:38:12,999 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:38:13,006 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:38:13,011 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:38:13,012 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:39:54,795 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:39:54,804 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:39:54,809 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:39:54,817 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:39:54,819 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:39:54,988 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:39:54,997 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:39:55,002 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:39:55,006 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:51,845 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:51,851 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:51,857 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:51,865 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:41:51,867 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:51,992 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:52,003 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:52,009 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:41:52,011 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:59,823 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:59,830 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:59,839 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:59,845 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:41:59,846 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:59,980 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:59,985 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:41:59,989 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:41:59,991 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:42:35,929 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:42:35,935 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:42:35,944 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:42:35,951 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:42:35,953 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:42:36,107 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:42:36,120 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:42:36,133 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:42:36,138 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:59:56,284 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:59:56,290 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:59:56,294 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:59:56,299 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:59:56,300 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:59:56,424 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:59:56,429 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 17:59:56,433 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 17:59:56,435 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:00:09,076 [DEBUG] urllib3.connectionpool: Starting new HTTP connection (1): 10.21.217.170:8475
2020-11-30 18:01:36,786 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:01:36,801 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:01:36,810 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:01:36,816 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 18:01:36,820 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:01:37,255 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-11-30 18:01:37,404 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:01:37,413 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:01:37,421 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 18:01:37,425 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:05:26,407 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:05:26,418 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:05:26,428 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:05:26,440 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 18:05:26,446 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:05:26,859 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:05:26,872 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:05:26,881 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 18:05:26,888 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:00,976 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:00,987 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:00,997 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:01,006 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 18:08:01,011 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:01,198 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:01,207 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:01,215 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 18:08:01,216 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:01,391 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:09,751 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:09,760 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:09,771 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:09,779 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 18:08:09,781 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:09,972 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:09,978 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:09,985 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-11-30 18:08:09,987 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-11-30 18:08:10,746 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 11:54:39,490 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-18 11:54:40,148 [INFO] absl: Load dataset info from /tmp/tmpke4mger8tfds
2020-12-18 11:54:40,157 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-18 11:54:40,166 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-18 11:54:40,413 [INFO] absl: Load dataset info from /tmp/tmpw4cl4haatfds
2020-12-18 11:54:40,423 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-18 11:54:40,430 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-18 11:54:40,653 [INFO] absl: Load dataset info from /tmp/tmp68a0de77tfds
2020-12-18 11:54:40,660 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-18 11:54:40,670 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-18 11:54:41,425 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.f4505262373447c69945baebec757c9a...
2020-12-18 11:54:41,454 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-12-18 11:54:41,598 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-12-18 11:54:49,662 [INFO] absl: Generating split train
2020-12-18 11:56:08,890 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete73ESUS/cifar10-train.tfrecord. Shard lengths: [50000]
2020-12-18 11:56:08,912 [INFO] absl: Generating split test
2020-12-18 11:56:23,468 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete73ESUS/cifar10-test.tfrecord. Shard lengths: [10000]
2020-12-18 11:56:23,476 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-12-18 11:56:23,491 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 11:56:24,674 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 11:56:24,685 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 11:56:24,697 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-18 11:56:24,703 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 11:56:27,378 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-12-18 11:56:27,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-12-18 11:56:27,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,380 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,382 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-12-18 11:56:27,383 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-12-18 11:56:27,384 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 11:56:27,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-12-18 11:56:27,385 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-12-18 11:56:27,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 11:56:27,386 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 11:56:27,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-12-18 11:56:27,387 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,388 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-12-18 11:56:27,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 11:56:27,389 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 11:56:27,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 11:56:27,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,390 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-12-18 11:56:27,391 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-12-18 11:56:27,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 11:56:27,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 11:56:27,392 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-12-18 11:56:27,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-12-18 11:56:27,393 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,394 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 11:56:27,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-12-18 11:56:27,395 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 11:56:27,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,396 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 11:56:27,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-12-18 11:56:27,397 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 11:56:27,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,398 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 11:56:27,399 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 11:56:27,400 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,402 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-12-18 11:56:27,403 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-12-18 11:56:27,408 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 11:56:27,410 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 11:56:27,411 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-12-18 11:56:37,128 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-12-18 11:56:37,309 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-12-18 11:56:50,764 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 11:56:51,207 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 11:56:52,401 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 11:57:05,892 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 11:57:06,116 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 11:57:20,664 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 11:57:32,578 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-12-18 11:57:32,584 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-12-18 11:57:57,030 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-12-18 13:01:21,060 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:02:26,511 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:02:33,205 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1)
2020-12-18 13:07:12,779 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:07:40,912 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:30:50,539 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:31:14,585 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:32:21,478 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:37:11,476 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:39:30,890 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:51:41,114 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:52:18,747 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:58:18,135 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 13:59:59,376 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:00:29,984 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:43:53,674 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:46:36,959 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:46:36,980 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:46:36,991 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:46:37,003 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-18 14:46:37,007 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:46:38,225 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:46:38,234 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:46:38,246 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-18 14:46:38,250 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:46:43,081 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-12-18 14:46:43,084 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,085 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:46:43,086 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,087 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,088 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:46:43,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-12-18 14:46:43,089 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:46:43,090 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,091 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-12-18 14:46:43,092 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:46:43,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,093 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:46:43,094 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:46:43,096 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,097 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-12-18 14:46:43,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,098 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,099 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,100 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-12-18 14:46:43,101 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:46:43,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:46:43,102 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:46:43,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,103 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,104 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,106 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,107 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-12-18 14:46:43,109 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:46:43,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:46:43,111 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,113 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:46:43,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:46:43,114 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-12-18 14:46:43,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,115 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:46:43,117 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-12-18 14:46:43,118 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,119 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:46:43,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,120 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:46:43,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-12-18 14:46:43,121 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:46:43,122 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,123 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:46:43,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:46:43,124 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-12-18 14:46:43,125 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-12-18 14:46:43,126 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:46:43,128 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:46:43,128 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-12-18 14:46:58,983 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-12-18 14:46:59,170 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-12-18 14:47:12,672 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 14:47:13,214 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 14:47:14,469 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 14:47:28,677 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 14:47:28,958 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 14:47:43,391 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 14:47:55,103 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-12-18 14:47:55,108 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-12-18 14:48:12,510 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-12-18 14:48:25,187 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:48:29,178 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1)
2020-12-18 14:52:30,710 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:54:35,013 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:55:12,925 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:56:28,046 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:56:28,070 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:56:28,091 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:56:28,102 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-18 14:56:28,106 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:56:29,299 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:56:29,308 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:56:29,313 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-18 14:56:29,316 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:56:32,474 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-12-18 14:56:32,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,478 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:56:32,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,479 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:56:32,481 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-12-18 14:56:32,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:56:32,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,482 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-12-18 14:56:32,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:56:32,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,483 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:56:32,484 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:56:32,485 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,486 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-12-18 14:56:32,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,487 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,488 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-12-18 14:56:32,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:56:32,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:56:32,489 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:56:32,490 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,491 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-12-18 14:56:32,492 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:56:32,493 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 14:56:32,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,494 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:56:32,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:56:32,495 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-12-18 14:56:32,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:56:32,496 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-12-18 14:56:32,497 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,498 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:56:32,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,499 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 14:56:32,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-12-18 14:56:32,500 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:56:32,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,501 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:56:32,502 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 14:56:32,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,503 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-12-18 14:56:32,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-12-18 14:56:32,504 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 14:56:32,505 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 14:56:32,506 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-12-18 14:56:46,190 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-12-18 14:56:46,426 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-12-18 14:56:59,991 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 14:57:00,426 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 14:57:01,635 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 14:57:15,618 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 14:57:15,878 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-18 14:57:30,262 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-18 14:57:42,236 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-12-18 14:57:42,240 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-12-18 14:57:57,103 [DEBUG] absl: Compiling _split for args (ShapedArray(uint32[2]),).
2020-12-18 14:58:10,107 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 14:58:14,301 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,10]), ShapedArray(float32[8,768,10]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1)
2020-12-18 15:01:22,763 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 15:05:17,332 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-12-18 15:05:17,334 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2020-12-18 15:05:17,335 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,337 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,338 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2020-12-18 15:05:17,339 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-12-18 15:05:17,341 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 15:05:17,342 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,344 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2020-12-18 15:05:17,346 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-12-18 15:05:17,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,347 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 15:05:17,349 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 15:05:17,351 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,352 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2020-12-18 15:05:17,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,353 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,355 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,356 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,357 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-12-18 15:05:17,358 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 15:05:17,359 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 15:05:17,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 15:05:17,361 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,362 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,363 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,364 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2020-12-18 15:05:17,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-12-18 15:05:17,365 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-12-18 15:05:17,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,366 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 15:05:17,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-12-18 15:05:17,367 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-12-18 15:05:17,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 15:05:17,368 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-12-18 15:05:17,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,369 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 15:05:17,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2020-12-18 15:05:17,370 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-12-18 15:05:17,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 15:05:17,371 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 15:05:17,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2020-12-18 15:05:17,372 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Humor Sans' (Humor-Sans.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2020-12-18 15:05:17,373 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2020-12-18 15:05:17,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-12-18 15:05:17,374 [DEBUG] matplotlib.font_manager: findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-12-18 15:05:17,374 [DEBUG] matplotlib.font_manager: findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/usr/local/lib/python3.6/dist-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-12-18 15:16:12,394 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 15:22:48,725 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 15:23:08,685 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 15:26:44,334 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 15:33:38,524 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 15:43:36,902 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d718240>
2020-12-18 15:43:36,904 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 15:43:36,904 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d718240>
2020-12-18 15:43:36,905 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 15:44:46,694 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 16:01:00,364 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d7e8d30>
2020-12-18 16:01:00,365 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:01:00,365 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d7e8d30>
2020-12-18 16:01:00,367 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:01:53,237 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d69b198>
2020-12-18 16:01:53,239 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:01:53,240 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d69b198>
2020-12-18 16:01:53,241 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:02:06,660 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04da4fd68>
2020-12-18 16:02:06,661 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:02:06,661 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04da4fd68>
2020-12-18 16:02:06,661 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:02:14,476 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d6cf668>
2020-12-18 16:02:14,477 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:02:14,477 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d6cf668>
2020-12-18 16:02:14,477 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:02:38,572 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04e082c18>
2020-12-18 16:02:38,573 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:02:38,574 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04e082c18>
2020-12-18 16:02:38,575 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:03:09,272 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04dab46d8>
2020-12-18 16:03:09,273 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:03:09,273 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04dab46d8>
2020-12-18 16:03:09,273 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:03:26,370 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04cf16cf8>
2020-12-18 16:03:26,371 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:03:26,371 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04cf16cf8>
2020-12-18 16:03:26,371 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:03:43,319 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04ce46358>
2020-12-18 16:03:43,320 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:03:43,320 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04ce46358>
2020-12-18 16:03:43,321 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:04:17,578 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04a1dca90>
2020-12-18 16:04:17,579 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:04:17,579 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04a1dca90>
2020-12-18 16:04:17,580 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:04:23,509 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04a1108d0>
2020-12-18 16:04:23,510 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:04:23,511 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04a1108d0>
2020-12-18 16:04:23,512 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:04:31,982 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04a044710>
2020-12-18 16:04:31,983 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:04:31,983 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04a044710>
2020-12-18 16:04:31,984 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:05:34,758 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 16:38:47,794 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d20fa20>
2020-12-18 16:38:47,795 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:38:47,796 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d20fa20>
2020-12-18 16:38:47,798 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:38:48,712 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04a8dcda0>
2020-12-18 16:38:48,712 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 16:38:48,712 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04a8dcda0>
2020-12-18 16:38:48,713 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 16:39:00,825 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-18 17:11:25,020 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d3e1ac8>
2020-12-18 17:11:25,022 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 17:11:25,022 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb04d3e1ac8>
2020-12-18 17:11:25,023 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-18 17:11:25,451 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb049fa74e0>
2020-12-18 17:11:25,451 [DEBUG] matplotlib.colorbar: Using auto colorbar locator on colorbar
2020-12-18 17:11:25,452 [DEBUG] matplotlib.colorbar: locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fb049fa74e0>
2020-12-18 17:11:25,452 [DEBUG] matplotlib.colorbar: Setting pcolormesh
2020-12-24 13:32:39,489 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-24 13:32:40,142 [INFO] absl: Load dataset info from /tmp/tmplzdxbk5ptfds
2020-12-24 13:32:40,148 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-24 13:47:47,266 [DEBUG] urllib3.connectionpool: Starting new HTTP connection (1): 10.17.19.34:8475
2020-12-24 13:48:06,477 [DEBUG] urllib3.connectionpool: http://10.17.19.34:8475 "POST /requestversion/tpu_driver0.1-dev20191206 HTTP/1.1" 200 3
2020-12-24 13:48:27,366 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-24 13:48:27,664 [INFO] absl: Load dataset info from /tmp/tmprxabhfgwtfds
2020-12-24 13:48:27,671 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-24 13:48:37,777 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-24 13:48:38,061 [INFO] absl: Load dataset info from /tmp/tmpqql705entfds
2020-12-24 13:48:38,070 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-24 13:48:38,075 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-24 13:48:38,285 [INFO] absl: Load dataset info from /tmp/tmpdsfga5gotfds
2020-12-24 13:48:38,290 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-24 13:48:38,296 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-24 13:48:38,508 [INFO] absl: Load dataset info from /tmp/tmphrcmtpeatfds
2020-12-24 13:48:38,514 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-24 13:48:38,518 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-24 13:48:39,047 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.e4e7ab6b1cf1483494b5c68ebb28f639...
2020-12-24 13:48:39,060 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-12-24 13:48:39,204 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-12-24 13:48:44,473 [INFO] absl: Generating split train
2020-12-24 13:49:23,074 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete61MC1P/cifar10-train.tfrecord. Shard lengths: [50000]
2020-12-24 13:49:23,080 [INFO] absl: Generating split test
2020-12-24 13:49:31,400 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incomplete61MC1P/cifar10-test.tfrecord. Shard lengths: [10000]
2020-12-24 13:49:31,413 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-12-24 13:49:31,433 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-24 13:49:32,211 [WARNING] tensorflow: From /usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py:201: sample_distorted_bounding_box (from tensorflow.python.ops.image_ops_impl) is deprecated and will be removed in a future version.
Instructions for updating:
`seed2` arg is deprecated.Use sample_distorted_bounding_box_v2 instead.
2020-12-24 13:49:32,354 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-24 13:49:32,364 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-24 13:49:32,372 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-24 13:49:32,374 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 10:48:13,016 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-25 10:48:13,609 [INFO] absl: Load dataset info from /tmp/tmpsmqfs9i_tfds
2020-12-25 10:48:13,619 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-25 10:48:26,206 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-12-25 10:48:26,528 [INFO] absl: Load dataset info from /tmp/tmpmhz6gt2ltfds
2020-12-25 10:48:26,544 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-12-25 13:23:08,953 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-25 13:23:09,440 [INFO] absl: Load dataset info from /tmp/tmpr7yy3259tfds
2020-12-25 13:23:09,447 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-25 13:23:09,452 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-25 13:23:09,770 [INFO] absl: Load dataset info from /tmp/tmp466yailktfds
2020-12-25 13:23:09,777 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-25 13:23:09,784 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-25 13:23:09,958 [INFO] absl: Load dataset info from /tmp/tmp9xi3vr9_tfds
2020-12-25 13:23:09,965 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-25 13:23:09,969 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-25 13:23:10,497 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.1e46030790384a9fbb216a32cf3d1ae9...
2020-12-25 13:23:10,520 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-12-25 13:23:10,660 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-12-25 13:23:17,624 [INFO] absl: Generating split train
2020-12-25 13:24:02,832 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incompleteHYU6UV/cifar10-train.tfrecord. Shard lengths: [50000]
2020-12-25 13:24:02,839 [INFO] absl: Generating split test
2020-12-25 13:24:12,172 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incompleteHYU6UV/cifar10-test.tfrecord. Shard lengths: [10000]
2020-12-25 13:24:12,178 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-12-25 13:24:12,191 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 13:24:12,710 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 13:24:12,719 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 13:24:12,729 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-25 13:24:12,731 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 13:27:42,058 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-25 13:27:42,496 [INFO] absl: Load dataset info from /tmp/tmpod9c0k9etfds
2020-12-25 13:27:42,503 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-25 13:27:42,508 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-25 13:27:42,698 [INFO] absl: Load dataset info from /tmp/tmpzc3shfqmtfds
2020-12-25 13:27:42,704 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-25 13:27:42,707 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: cifar10/3.0.2
2020-12-25 13:27:42,908 [INFO] absl: Load dataset info from /tmp/tmpngpr2h7ktfds
2020-12-25 13:27:42,914 [INFO] absl: Field info.citation from disk and from code do not match. Keeping the one from code.
2020-12-25 13:27:42,916 [INFO] absl: Generating dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-25 13:27:43,330 [INFO] absl: Downloading https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz into /root/tensorflow_datasets/downloads/cs.toronto.edu_kriz_cifar-10-binaryODHPtIjLh3oLcXirEISTO7dkzyKjRCuol6lV8Wc6C7s.tar.gz.tmp.6be4806eb16f4eb6811f4136e9d9cc94...
2020-12-25 13:27:43,349 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): www.cs.toronto.edu:443
2020-12-25 13:27:43,463 [DEBUG] urllib3.connectionpool: https://www.cs.toronto.edu:443 "GET /~kriz/cifar-10-binary.tar.gz HTTP/1.1" 200 170052171
2020-12-25 13:27:48,907 [INFO] absl: Generating split train
2020-12-25 13:28:22,758 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incompleteKH2TUM/cifar10-train.tfrecord. Shard lengths: [50000]
2020-12-25 13:28:22,764 [INFO] absl: Generating split test
2020-12-25 13:28:29,604 [INFO] absl: Done writing /root/tensorflow_datasets/cifar10/3.0.2.incompleteKH2TUM/cifar10-test.tfrecord. Shard lengths: [10000]
2020-12-25 13:28:29,612 [INFO] absl: Skipping computing stats for mode ComputeStatsMode.SKIP.
2020-12-25 13:28:29,619 [INFO] absl: Constructing tf.data.Dataset for split train[:98%], from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 13:28:30,262 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 13:28:30,271 [INFO] absl: Load dataset info from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 13:28:30,279 [INFO] absl: Reusing dataset cifar10 (/root/tensorflow_datasets/cifar10/3.0.2)
2020-12-25 13:28:30,282 [INFO] absl: Constructing tf.data.Dataset for split test, from /root/tensorflow_datasets/cifar10/3.0.2
2020-12-25 13:28:38,746 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-12-25 13:28:38,836 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-12-25 13:28:39,385 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-25 13:28:39,617 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-25 13:28:39,912 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-25 13:28:40,133 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-25 13:28:40,358 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-25 13:28:40,578 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-27 08:13:21,392 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:16:20,552 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:30:35,384 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:38:47,031 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:44:41,908 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:44:49,975 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:53:27,923 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:53:28,535 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-12-27 08:53:28,934 [INFO] absl: Load dataset info from /tmp/tmp0v699g68tfds
2020-12-27 08:53:28,946 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-12-27 08:53:28,948 [INFO] absl: Field info.module_name from disk and from code do not match. Keeping the one from code.
2020-12-27 08:53:28,950 [INFO] absl: Reusing dataset imagenet2012 (./tensorflow_datasets_subset/imagenet2012/5.1.0)
2020-12-27 08:53:28,951 [INFO] absl: Constructing tf.data.Dataset for split validation[:], from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:53:57,656 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:53:57,675 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-12-27 08:53:57,962 [INFO] absl: Load dataset info from /tmp/tmp_tgjd7jgtfds
2020-12-27 08:53:57,974 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-12-27 08:53:57,978 [INFO] absl: Field info.module_name from disk and from code do not match. Keeping the one from code.
2020-12-27 08:53:57,984 [INFO] absl: Reusing dataset imagenet2012 (./tensorflow_datasets_subset/imagenet2012/5.1.0)
2020-12-27 08:53:57,985 [INFO] absl: Constructing tf.data.Dataset for split validation[:], from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:53:58,071 [INFO] absl: Load dataset info from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:53:58,089 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-12-27 08:53:58,304 [INFO] absl: Load dataset info from /tmp/tmpt7cgs5_otfds
2020-12-27 08:53:58,314 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-12-27 08:53:58,316 [INFO] absl: Field info.module_name from disk and from code do not match. Keeping the one from code.
2020-12-27 08:53:58,320 [INFO] absl: Reusing dataset imagenet2012 (./tensorflow_datasets_subset/imagenet2012/5.1.0)
2020-12-27 08:53:58,322 [INFO] absl: Constructing tf.data.Dataset for split validation[:], from ./tensorflow_datasets_subset/imagenet2012/5.1.0
2020-12-27 08:56:02,872 [DEBUG] absl: Compiling _fold_in for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True)).
2020-12-27 08:56:03,051 [DEBUG] absl: Compiling _truncated_normal for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(int32[], weak_type=True)).
2020-12-27 08:56:16,284 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-27 08:56:16,664 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-27 08:56:17,735 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-27 08:56:32,464 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-27 08:56:32,639 [DEBUG] absl: Compiling _uniform for args (ShapedArray(uint32[2]), ShapedArray(int32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
2020-12-27 08:56:47,196 [DEBUG] absl: Compiling _normal for args (ShapedArray(uint32[2]),).
2020-12-27 08:57:13,879 [WARNING] vit_jax.logging: Inspect recovered empty keys:
{'pre_logits'}
2020-12-27 08:57:13,885 [INFO] vit_jax.logging: load_pretrained: drop-head variant
2020-12-27 08:58:09,019 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-12-27 08:58:09,277 [INFO] absl: Load dataset info from /tmp/tmpyuqviehdtfds
2020-12-27 08:58:09,287 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-12-27 08:58:09,289 [INFO] absl: Field info.module_name from disk and from code do not match. Keeping the one from code.
2020-12-27 08:59:10,453 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-12-27 08:59:10,719 [INFO] absl: Load dataset info from /tmp/tmpz0hx9vketfds
2020-12-27 08:59:10,732 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-12-27 08:59:10,734 [INFO] absl: Field info.module_name from disk and from code do not match. Keeping the one from code.
2020-12-27 08:59:18,062 [DEBUG] absl: Compiling call for 8 devices with args (ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072]), ShapedArray(float32[8,768,3072]), ShapedArray(float32[8,768]), ShapedArray(float32[8,3072,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,768]), ShapedArray(float32[8,12,64,768]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,12,64]), ShapedArray(float32[8,768,12,64]), ShapedArray(float32[8,1,145,768]), ShapedArray(float32[8,1,1,768]), ShapedArray(float32[8,768]), ShapedArray(float32[8,32,32,3,768]), ShapedArray(float32[8,1000]), ShapedArray(float32[8,768,1000]), ShapedArray(float32[8,64,384,384,3])). (num_replicas=8 num_partitions=1)
2020-12-27 08:59:41,151 [INFO] absl: Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: imagenet2012/5.1.0
2020-12-27 08:59:41,456 [INFO] absl: Load dataset info from /tmp/tmpi084554xtfds
2020-12-27 08:59:41,468 [INFO] absl: Field info.description from disk and from code do not match. Keeping the one from code.
2020-12-27 08:59:41,470 [INFO] absl: Field info.module_name from disk and from code do not match. Keeping the one from code.
